version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${DB_NAME:-car_erp_production}
      POSTGRES_USER: ${DB_USER:-car_erp_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - car_erp_network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - car_erp_network

  # Django Backend
  backend:
    build: 
      context: ./car_erp_backend
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py setup_initial_data &&
             gunicorn car_erp_backend.wsgi:application --bind 0.0.0.0:8000 --workers 3"
    volumes:
      - media_volume:/app/media
      - static_volume:/app/staticfiles
    environment:
      - DEBUG=False
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - car_erp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery:
    build: 
      context: ./car_erp_backend
      dockerfile: Dockerfile
    command: celery -A car_erp_backend worker -l info --concurrency=2
    volumes:
      - media_volume:/app/media
    environment:
      - DEBUG=False
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - car_erp_network

  # Celery Beat (Scheduler)
  celery-beat:
    build: 
      context: ./car_erp_backend
      dockerfile: Dockerfile
    command: celery -A car_erp_backend beat -l info
    volumes:
      - media_volume:/app/media
    environment:
      - DEBUG=False
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - car_erp_network

  # React Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
    command: npm run build && npx serve -s build -l 3000
    volumes:
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - car_erp_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - car_erp_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_volume:
    driver: local
  static_volume:
    driver: local

networks:
  car_erp_network:
    driver: bridge
